-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language LI1.

module AbsLI where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Prog Stm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- O SAss é uma atribuição de uma expressão a uma variável (Isso é definido na sintaxe concreta)
-- O SBlock é uma lista de comandos
-- O SWhile é um ciclo while. Ele tem uma Exp (a condicional) e um Stm, que pode ser um simples comando, como uma atribuição, um bloco de comandos ou até um ciclo while
data Stm = SAss Ident Exp | SBlock [Stm] | SWhile Exp Stm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp -- Uma expressão pode ser
    = EAdd Exp Exp -- Uma expressão de soma
    | ESub Exp Exp -- Uma expressão de subtração
    | EMul Exp Exp -- Uma expressão de multiplicação
    | EDiv Exp Exp -- Uma expressão de divisão
    | EInt Integer -- Um número inteiro
    | EVar Ident -- Uma variável, que é um identificador para uma outra expressão
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

